from quiz_struct import QuizQuestion

quiz_header = "PCAP Programming Essentials in Python Essentials 2 PE2 Module 2"
quiz_description = """
    PCAP Programming Essentials in Python Essentials 2 PE2 Module 2"""
quiz_information = """
    PCAP Programming Essentials in Python Essentials 2 PE2 Module 2  
    Test Quizzes Exam Answers"""
quiz_link = "[Click here to learn more >](https://pythoninstitute.org/pcap)"

# Define the questions, correct answers, and possible answers
quiz = {
    1: QuizQuestion('''The following code:''',
                    '''print(ord('c') - ord('a'))''',
                    '''prints:''',
                    None,
                    {'A': '0', 'B': '2', 'C': '3', 'D': '1'},
                    ['B'],
                    ),
    2: QuizQuestion('''The following code:''',
                    '''print(float("1, 3" ))''',
                    None,
                    None,
                    {'A': 'prints 1, 3', 'B': 'raises a ValueError exception', 'C': 'prints 1.3',
                     'D': 'prints 13'},
                    ['B'],
                    ),
    3: QuizQuestion('''The top-most Python exception is called:''',
                    None,
                    None,
                    None,
                    {'A': 'TopException', 'B': 'Exception',
                     'C': 'BaseException', 'D': 'PythonException'},
                    ['C'],
                    ),
    4: QuizQuestion('''The following statement:''',
                    '''assert var == 0''',
                    None,
                    None,
                    {'A': 'is erroneous',
                     'B': 'will stop the program when var != 0',
                     'C': 'has no effect',
                     'D': 'will stop the program when var == 0'},
                    ['B'],
                    ),
    5: QuizQuestion('''UNICODE is a standard:''',
                    None,
                    None,
                    None,
                    {'A': 'used by coders from universities', 'B': 'honored by the whole universe',
                     'C': 'like ASCII, but much more expansive', 'D': 'for coding floating-point numbers'},
                    ['C'],
                    ),
    6: QuizQuestion('''ASCII is:''',
                    None,
                    None,
                    None,
                    {'A': 'a predefined Python variable name',
                     'B': 'a standard Python module name', 'C': 'a character name',
                     'D': 'short for American Standard Code for Information Interchange'},
                    ['D'],
                    ),
    7: QuizQuestion('''The following code:''',
                    '''print(3 * 'abc' +'xyz')''',
                    '''prints:''',
                    None,
                    {'A': 'xyzxyzxyzxyz', 'B': 'abcabcxyzxyz',
                     'C': 'abcabcabcxyz', 'D': 'abcxyzxyzxyz'},
                    ['C'],
                    ),
    8: QuizQuestion('''UTF-8 is:''',
                    None,
                    None,
                    None,
                    {'A': 'a Python version name',
                     'B': 'the 9th version of the UTF standard',
                     'C': 'a form of encoding Unicode code points',
                     'D': 'a synonym for byte'},
                    ['C'],
                    ),
    9: QuizQuestion('''Entering the try: block implies that:''',
                    None,
                    None,
                    None,
                    {'A': 'all of the instructions from this block will be executed',
                     'B': 'some of the instructions from this block may not be executed',
                     'C': 'the block will be omitted',
                     'D': 'none of the instructions from this block will be executed'},
                    ['B'],
                    ),
    10: QuizQuestion('''What is the expected output of the following code?''',
                     '''
                     try  
                        print("5"/0)  
                     except ArithmeticError:  
                        print("arith")  
                     except ZeroDivisionError:  
                        print("zero")  
                     except:  
                        print("some")''',
                     None,
                     None,
                     {'A': 'zero', 'B': '0', 'C': 'some', 'D': 'arith'},
                     ['C'],
                     ),
    11: QuizQuestion('''The unnamed except: block:''',
                     None,
                     None,
                     None,
                     {'A': 'must be the first one',
                      'B': 'can be placed anywhere',
                      'C': 'cannot be used if any named block has been used',
                      'D': 'must be the last one'},
                     ['D'],
                     ),
    12: QuizQuestion('''The following code:''',
                     '''print('Mike' > " Mikey")''',
                     '''prints:''',
                     None,
                     {'A': '0', 'B': '1', 'C': 'True',
                      'D': 'False'},
                     ['D'],
                     ),
    13: QuizQuestion('''The following code:''',
                     '''print(chr(ord('z') - 2))''',
                     '''prints:''',
                     None,
                     {'A': 'z', 'B': 'y', 'C': 'a', 'D': 'x'},
                     ['D'],
                     ),
    14: QuizQuestion('''The following code:''',
                     '''
                     x = '\\\' '  
                     print(len(x))''',
                     '''prints:''',
                     None,
                     {'A': '3', 'B': '2', 'C': '20', 'D': '1'},
                     ['D'],
                     ),
    15: QuizQuestion(
        '''Which of the following are examples of Python built-in concrete exceptions?(Select twoanswers)''',
        None,
        None,
        None,
        {'A': 'ArithemticError', 'B': 'IndexError', 'C': 'BaseException', 'D': 'ImportError', 'E': '3.7', 'F': '50'},
        ['B', 'D'],
    )}
